# -*- coding: utf-8 -*-
"""Car_Price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12ctPT4GBpLKxppiseaMoSpKOW4qqTNrm
"""

import requests
import pandas as pd
import numpy as np

url = 'https://raw.githubusercontent.com/rajtilakls2510/car_price_predictor/master/quikr_car.csv'
res = requests.get(url, allow_redirects=True)
with open('Car.csv', 'wb') as file:
    file.write(res.content)
car_data = pd.read_csv('Car.csv', sep=',')

print(car_data.describe)

car_data.head()

# Clean the dataset as it is essential

car_data['Price'].unique()

car_data['kms_driven'].unique()

backup = car_data.copy()

# Clean year
car_data['year'].str.isnumeric()

car_data = car_data[car_data['year'].str.isnumeric()]

car_data['year'].str.isnumeric()

car_data['year'] = car_data['year'].astype(int)

car_data.dtypes

car_data.info()

car_data = car_data[car_data['Price'] != "Ask For Price"]

# Removing commas from Price values
car_data['Price'] = car_data['Price'].str.replace(',', '')

car_data['Price'] = car_data['Price'].astype(int)

car_data.info()

car_data['kms_driven'] = car_data['kms_driven'].str.split(' ').str.get(0)

car_data['kms_driven'] = car_data['kms_driven'].str.replace(',', '')

car_data = car_data[car_data['kms_driven'].str.isnumeric()]

car_data['kms_driven'] = car_data['kms_driven'].astype(int)

car_data.info()

car_data['fuel_type'].unique()

car_data = car_data[
    ~car_data['fuel_type'].isna()]  # this step is very important if we wish to remove nan from a data frame

car_data.info()

car_data = car_data.sort_values('name')

car_data.head()

car_data['fuel_type'].unique()

car_data = car_data[car_data['Price'] < 6e6].reset_index(drop=True)

car_data.head()

car_data.describe()

import matplotlib.pyplot as plt

a = car_data['year']
b = car_data['Price']
plt.scatter(a, b)
# plt.show()

car_data.to_csv('Cleaned_car.csv')

x = car_data.drop(columns='Price')  # setting the model except the price as it is our target  
y = car_data['Price']  # setting the target for the model

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.preprocessing import OneHotEncoder

ohe = OneHotEncoder()
ohe.fit(x[['name', 'company', 'fuel_type', 'year']])

from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline

column_trans = make_column_transformer(
    (OneHotEncoder(categories=ohe.categories_), ['name', 'company', 'fuel_type', 'year']), remainder='passthrough')

lr = LinearRegression()

pipe = make_pipeline(column_trans, lr)
pipe.fit(x_train, y_train)

y_pred = pipe.predict(x_test)

r2_score(y_test, y_pred)
a = np.linspace(1, 1000, 3000)
b = np.random.randint(0, 1, 3000)

# enable interactive mode
plt.ion()
figure, ax = plt.subplots(figsize=(7,5))
line1, = ax.plot(a,b)
plt.title("R2 Score", fontsize=20)

# setting x-axis label and y-axis label
plt.xlabel("Interation -> ")
plt.ylabel("R2 Score")
scores = []
import time
for i in range(1000):
    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.8, random_state=i)
    lr = LinearRegression()
    pipe = make_pipeline(column_trans, lr)
    pipe.fit(x_train, y_train)
    y_pred = pipe.predict(x_test)
    scores.append(r2_score(y_test, y_pred))

    plt.plot(i, scores[i], 'bo')
    new_y = scores[i]

    # updating data values
    line1.set_xdata(i)
    line1.set_ydata(new_y)

    # drawing updated values
    figure.canvas.draw()

    # This will run the GUI event
    # loop until all UI events
    # currently waiting have been processed
    figure.canvas.flush_events()

    time.sleep(0.01)
